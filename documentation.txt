Documentation.

This website requires PHP, and MySQL/MariaDB.

This website uses the CodeIgniter PHP framework for its backend and AngularJS JavaScript framework for its frontend logic.

CodeIgniter is based on the MVC (Model-View-Controller) architectural pattern wherein the 'model' component is in charge of storing data, the 'view' for user interface, and the 'controller' for acting as a middleware between the two as well as displaying views to the user. The models, views, and controllers of this project are stored within /application/ in their respective folders. Every controller extends MY_Controller and every model extends MY_Model, which are both located in /application/core/.

Configuration:
- the database credentials must be set at /application/config/database.php
- the url of the site can be changed at /application/config/config.php. Look for the 'base_url' config.
- to change the prefix, go to /application/config/constants.php and change the value of DB_PREFIX (must be done before database initialization).
- If the Employee table is taken from an external source, by default the user can't change Employee information. To enable this, go to /application/config/config.php and change the value of 'employee_editable_if_external'.

Core:
-MY_Controller.php
    -loads the authentication plugin (IonAuth) of the website.
    -also loads the angular_communication_helper found in /application/helpers (refer to Communication between CodeIgniter and AngularJS)
    -Functions:
        -checkLogin - checks if the user is logged-in and is the admin of the website. (non-admin users are not implemented.)
        -index - displays the header and footer views around the result of the 'body' function.
        -body - meant to be overridden. Child classes should display the body of their respective pages in here.
        -html - used for displaying subpages. (<base_website_url>/<controller-name>/<sub-page>: e.g given http://www.localhost.com/calendar/manageCollisions, manageCollisions is a subpage of calendar)
-MY_Model.php
    -loads the database libraries of CodeIgniter
    -Functions:
        -checkFields($checker,$checkee) - $checkee is filtered using data described by $checker (refer to the private variables defined in /application/models/employee_leaves_model.php). This is used to filter unwanted data contained in $checkee.

Controllers: (/application/controllers/)
A controller is called when a user adds the controller's name as a segment to the base URL of the site. (
    e.g. Given a base url of http://www.localhost.com/,
        Employee.php is called when the user accesses http://www.localhost.com/employee.
        The functions of Employee.php are called using http://www.localhost.com/employee/functionName.
). The controller's 'index' function  is called when nothing is supplied. The default controller is Main.php.
-Main.php
    - Controls the default page of the website. Checks first if the user is logged in, if so, it displays the homepage, otherwise it displays the login page.
-Calendar.php
    - Manages the Calendar components of the website.
-DB.php
    - This controller is in charge of initializing the database of the website.
-Employee.php
    - Contains the Employee-related logic of the website. 
	- In charge of addition, deletion, and editing of employee information as well as the management of leave records.

Models: (/application/models/)
*Each database table generated by this site is prefixed with the DB_PREFIX constant found in /application/config/constants.php
-Employee_Leaves_Model.php
    - Creates and manages the database tables for the employees, employee-leave connector, and leave records.
    - The employee table is used for storing the employees' personal info, while the employee-leave connector table is used for storing an employee's info that are relevant to the computation of his leave credits.
    - The 'employee_table_meta' table is for storing the meta values of the employee table. This is needed because the user can define an external employee table at initialization.
-Calendar_Model.php
    - Creates and manages the database tables for Calendar Events and Calendar Collisions (Calendar collisions are suspended work days that overlapped with an employee's leave)

Views: (/application/views/)
Most of the views are backed by AngularJS. While the backend is in charge of storing data, AngularJS does the computations and formatting of these data.
-header.php (ng-app directive is set here, uses the 'initializer' and 'login' controller), footer.php, breadcrumbs.php
    -respectively displays the header, footer, and breadcrumbs of the website.
-welcome_message.php
    -displays the homepage of the website (The one with the two big buttons -- Employee and Calendar)
-login.php (uses the 'login' controller)
    -login page. gets displayed if the user is not logged-in.
-permission_error.php
    -displays a permission error message. This is unused because the only registered user of the site is the admin.
-db_init.php (uses the 'init_db' controller)
    -displays the database initialization form. Here the user can set the metadata of an external employee table, or initialize the internal employee table.
-admin.php (uses the 'admin' controller)
    -in here, the admin can change his credentials.
-/employee/navigation.php (uses the 'employee_nav' controller)
    -default subpage for the Employees page. Displays the list of employees as well as a search bar.
-/employee/add.php (uses the 'employee_add' controller)
    -displays the form for adding employee records. Inaccessible by default if the employee table is external. (Refer to Configuration section)
-/employee/display.php (uses the 'employee_display' and 'employee_statistics' controllers)
    -displays a selected employee. Contains the main component of the website. In here, the admin can edit the employee's information and manage and print his leave records
-/employee/leave_records.php (uses the 'employee_leave_records' controller)
    -requires to be called within display.php. Contains the form for the addition, editing, and deletion of leave records.

AngularJS-Related Files and Controllers: (It is imperative that the reader knows the basics of AngularJS before reading this part)
-/js/app.js
    -contains the initialization of the site's module.
    -initialization: ('app.run(function($rootScope,$http,$httpParamSerializer,$timeout){...}')
        -in this block of code, all global variables and functions are stored in the root scope.
        -Global Variables
            -dateFormat - refers to the date format used for displaying date data.
            -busy - refers to whether the website is loading or handling some computation.
            -customModalData - A global modal is defined in the application for displaying dialog to the user. customModalData is the object that contains the data of this modal.
            -minuteCreditTable and hourCreditTable - stores time-credit equivalence as defined by Omnibus. Minute to credit equivalence cannot be computed because it sometimes does not equal the Omnibus-defined equivalence. Hour to credit equivalence table is defined for consistency.
            -moment - A global variable for Moment.js. This is defined so that Moment.js functions can be used in HTML.
        -Global Functions
            -showCustomModal($header,$body,$onConfirm,$onClose,$confirmName,$closeName)
                -when called, this function sets the global customModal data. $header is for the header of the modal and $body for the body. $onConfirm is a function that is called when the modal is confirmed, $onClose is a function that is called when the modal is closed. $confirmName and $closeName respectively defines the button names for confirming and closing the modal.
            -post($url,$inputData,$onSuccess,$onFailure)
                -A wrapper function for posting data to the server.
                -$url defines the url for posting, $inputData is the data to be posted, $onSuccess is a function that is called if the posting returns no errors, and $onFailure is a function that is called if there are errors.
                - (refer to Communication Between CodeIgniter and AngularJS)
            -longComputation($scope,$field,$valueGiver,$args)
                - This function is used for computations that take a significant time to complete. It asynchronously assigns the result of a function to a given variable. While the computation is being done, this function displays the loading screen.
                - Since JavaScript doesn't allow pass-by-reference in a strict sense, this function requires the scope($scope) in which the variable($field) is defined. The variable's value is given by the function $valueGiver and its parameters $args.
            -creditsToTime($credits)
                -converts leave credits ($credits) to time. Returns an object containing the fields 'hours' and 'minutes'
            -timeToCredits($hours,$minutes)
                -converts $hours and $minutes to leave credits.
    -Controllers:
        -initializer
            -adds the base URL of the site to the root scope, as well as the csrf token name and hash. (The csrf token name and hash are used for the Cross-Site Request Forgery protection of the site)
        -login
            - handles the logging in and out of the user.
        -admin
            - handles the changing of the admin's credentials.

Communication between CodeIgniter and AngularJS.
